{
  // 在最顶层设置compileOnSave标记，可以让IDE在保存文件的时候根据tsconfig.json重新生成文件。
  // WebStorm 中可以在设置中开启 recompile on changes，不用配置这个属性
  // 要想支持这个特性需要Visual Studio 2015， TypeScript1.8.4以上并且安装atom-typescript插件。
  "compileOnSave": true,
  "compilerOptions": {
    /* 基本选项 */
    "target": "ES2018",
    // 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'
    "module": "commonjs",
    // 指定要包含在编译中的库文件
    "lib": [],
    // 允许编译 javascript 文件
    "allowJs": true,
    // 报告 javascript 文件中的错误
    "checkJs": true,
    // 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'
//    "jsx": "preserve",
    // 生成相应的 '.d.ts' 文件
    "declaration": true,
    // 生成相应的 '.map' 文件
    "sourceMap": true,
    // 指定输出目录
    "outDir": "dist",
    // 用来控制输出目录结构 --outDir.
    "rootDir": "./src",
    // 删除编译后的所有的注释
    "removeComments": true,
    // 不生成输出文件
   //  "noEmit": true,
    // TypeScript 编译其会有和在 3-1 使用ES6语言中 Babel 一样的问题：在把 ES6 语法转换成 ES5 语法时需要注入辅助函数， 为了不让同样的辅助函数重复的出现在多个文件中，可以开启 TypeScript 编译器的 importHelpers 选项，
    "importHelpers": true,
    // 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）.
    "isolatedModules": true,               // 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）.
  
    /* 严格的类型检查选项 */
    "strict": true,                        // 启用所有严格类型检查选项
    
    
    /* 额外的检查 */
//    "noUnusedLocals": true,                // 有未使用的变量时，抛出错误
//    "noUnusedParameters": true,            // 有未使用的参数时，抛出错误
//    "noImplicitReturns": true,             // 并不是所有函数里的代码都有返回值时，抛出错误
//    "noFallthroughCasesInSwitch": true,    // 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）
  
    /* 模块解析选项 */
    // 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)
    "moduleResolution": "node",
    // 用于解析非相对模块名称的基目录
    "baseUrl": ".",
    // 模块名到基于 baseUrl 的路径映射的列表
    "paths": {},
    // 根文件夹列表，其组合内容表示项目运行时的结构内容
    "rootDirs": [],
//    "typeRoots": [],                       // 包含类型声明的文件列表
//    "types": [],                           // 需要包含的类型声明文件名列表
    // 允许从没有设置默认导出的模块中默认导入。
    "allowSyntheticDefaultImports": true,
    /* 其他选项 */
    "experimentalDecorators": true,        // 启用装饰器
    "emitDecoratorMetadata": true          // 为装饰器提供元数据的支持
  },
  // "files"指定一个包含相对或绝对文件路径的列表。
//  "files": [],
  // "include"和"exclude"属性指定一个文件glob匹配模式列表。   (* / ? / **/ )
  /*
      * 匹配0或多个字符（不包括目录分隔符）
      ? 匹配一个任意字符（不包括目录分隔符）
      **\/ 递归匹配任意子目录
  */
  "include": [
    "src/**/*"
  ],
  // 如果没有特殊指定， "exclude"默认情况下会排除node_modules，bower_components，jspm_packages和<outDir>目录。
  "exclude": [
    "test/**/*",
    "**/*.spec.ts"
  ]
}
